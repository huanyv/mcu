C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\ProgramFiles\Keil_v5\C51\BIN\C51.EXE src\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg52.h>
   2          #include"key.h"
   3          
   4          #define   count          50000
   5          #define   THx            (65536-count)/256
   6          #define   TLx            (65536-count)%256
   7          
   8          #define   YELLOW_TIME    5  //黄灯亮的时间
   9          #define   TIME_SMALL     20 //最大时间
  10          #define   TIME_BIG       60 //最小时间
  11          #define   TIME               10 //初始时间
  12          
  13          #define   NS_Display     P0
  14          #define   EW_Display     P1
  15          
  16          sbit NS_LED_Red    = P3^0;
  17          sbit NS_LED_Yellow = P3^1;
  18          sbit NS_LED_Green  = P3^2;
  19          
  20          sbit EW_LED_Red    = P3^3;
  21          sbit EW_LED_Yellow = P3^4;
  22          sbit EW_LED_Green  = P3^5;
  23          
  24          sbit bit_0 = P2^0;
  25          sbit bit_1 = P2^1;
  26          
  27          uchar code duanxuan[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  28          
  29          uchar sec  = TIME;
  30          uchar secCache = TIME;
  31          uchar state = 1;
  32          
  33          bit FLASHING = 0;
  34          
  35          void delay(uint i)
  36          {
  37   1          while(i--);
  38   1      }
  39          
  40          void display()
  41          {
  42   1          if(state == 1 || state == 2)        //状态1和状态2，东西比南北少2秒
  43   1          {
  44   2              bit_0 = 0;
  45   2              bit_1 = 1;
  46   2      
  47   2              NS_Display = duanxuan[ sec % 10 ];
  48   2              delay(100);
  49   2              NS_Display = 0x00;
  50   2              if(sec > YELLOW_TIME)
  51   2              {
  52   3                  EW_Display = duanxuan[ (sec - YELLOW_TIME) % 10 ];
  53   3                  delay(200);
  54   3                  EW_Display = 0x00;
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 2   

  55   3              }
  56   2              else
  57   2              {
  58   3                  EW_Display = duanxuan[sec % 10];
  59   3                  delay(200);
  60   3                  EW_Display = 0x00;
  61   3              }
  62   2      
  63   2              bit_0 = 1;
  64   2              bit_1 = 0;
  65   2      
  66   2              NS_Display = duanxuan[sec / 10];
  67   2              delay(100);
  68   2              NS_Display = 0x00;
  69   2              if(sec > YELLOW_TIME)
  70   2              {
  71   3                  EW_Display = duanxuan[ (sec - YELLOW_TIME) / 10 ];
  72   3                  delay(200);
  73   3                  EW_Display = 0x00;
  74   3              }
  75   2              else
  76   2              {
  77   3                  EW_Display = duanxuan[sec / 10];
  78   3                  delay(200);
  79   3                  EW_Display = 0x00;
  80   3              }
  81   2          }
  82   1          else if(state == 3 || state == 4)//状态3和状态4，南北比东西少2秒
  83   1          {
  84   2              bit_0 = 0;
  85   2              bit_1 = 1;
  86   2      
  87   2              EW_Display = duanxuan[sec % 10];
  88   2              delay(100);
  89   2              EW_Display = 0x00;
  90   2              if(sec>YELLOW_TIME)
  91   2              {
  92   3                  NS_Display = duanxuan[ (sec - YELLOW_TIME) % 10 ];
  93   3                  delay(200);
  94   3                  NS_Display = 0x00;
  95   3              }
  96   2              else
  97   2              {
  98   3                  NS_Display = duanxuan[sec % 10];
  99   3                  delay(200);
 100   3                  NS_Display = 0x00;
 101   3              }
 102   2      
 103   2              bit_0 = 1;
 104   2              bit_1 = 0;
 105   2      
 106   2              EW_Display = duanxuan[sec / 10];
 107   2              delay(100);
 108   2              EW_Display = 0x00;
 109   2              if(sec>YELLOW_TIME)
 110   2              {
 111   3                  NS_Display = duanxuan[ (sec - YELLOW_TIME) / 10 ];
 112   3                  delay(200);
 113   3                  NS_Display = 0x00;
 114   3              }
 115   2              else
 116   2              {
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 3   

 117   3                  NS_Display = duanxuan[sec / 10];
 118   3                  delay(200);
 119   3                  NS_Display = 0x00;
 120   3              }
 121   2          }
 122   1          else if(state == 6 || state == 7 || state == 8)      //路口通行管理
 123   1          {
 124   2              bit_0 = 0;
 125   2              bit_1 = 1;
 126   2      
 127   2              NS_Display = 0x3f;
 128   2              delay(100);
 129   2              NS_Display = 0x00;
 130   2              EW_Display = 0x3f;
 131   2              delay(100);
 132   2              EW_Display = 0x00;
 133   2      
 134   2              bit_0 = 1;
 135   2              bit_1 = 0;
 136   2      
 137   2              NS_Display = 0x3f;
 138   2              delay(100);
 139   2              NS_Display = 0x00;
 140   2              EW_Display = 0x3f;
 141   2              delay(100);
 142   2              EW_Display = 0x00;
 143   2          }
 144   1      }
 145          
 146          void led_display()
 147          {
 148   1          if(state == 1)      //s1
 149   1          {
 150   2              EW_LED_Red = 0;
 151   2              EW_LED_Green = 1;
 152   2              EW_LED_Yellow = 1;
 153   2      
 154   2              NS_LED_Red = 1;
 155   2      
 156   2              if((sec - 5) > 3)
 157   2                  NS_LED_Green = 0;
 158   2              else
 159   2              {
 160   3                  if(FLASHING == 1)
 161   3                      NS_LED_Green  = 0;
 162   3                  if(FLASHING == 0)
 163   3                      NS_LED_Green = 1;
 164   3              }
 165   2      
 166   2              NS_LED_Yellow = 1;
 167   2          }
 168   1          else if(state == 2) //s2
 169   1          {
 170   2              EW_LED_Red = 0;
 171   2              EW_LED_Green = 1;
 172   2              EW_LED_Yellow = 1;
 173   2      
 174   2              NS_LED_Red = 1;
 175   2              NS_LED_Green = 1;
 176   2              NS_LED_Yellow = 0;
 177   2      
 178   2          }
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 4   

 179   1          else if(state==3) //s3
 180   1          {
 181   2              EW_LED_Red=1;
 182   2      
 183   2              if((sec - 5) > 3)
 184   2                  EW_LED_Green = 0;
 185   2              else
 186   2              {
 187   3                  if(FLASHING == 1)
 188   3                      EW_LED_Green = 0;
 189   3                  if(FLASHING == 0)
 190   3                      EW_LED_Green = 1;
 191   3              }
 192   2      
 193   2              EW_LED_Yellow = 1;
 194   2      
 195   2              NS_LED_Red = 0;
 196   2              NS_LED_Green = 1;
 197   2              NS_LED_Yellow = 1;
 198   2          }
 199   1          else if(state == 4) //s4
 200   1          {
 201   2              EW_LED_Red = 1;
 202   2              EW_LED_Green = 1;
 203   2              EW_LED_Yellow = 0;
 204   2      
 205   2      
 206   2              NS_LED_Red = 0;
 207   2              NS_LED_Green = 1;
 208   2              NS_LED_Yellow = 1;
 209   2          }
 210   1          else if(state == 5)  //回到s1
 211   1          {
 212   2              state = 1;//一共四个状态
 213   2          }
 214   1          else if(state == 6)
 215   1          {
 216   2              EW_LED_Red = 1;
 217   2              EW_LED_Green = 1;
 218   2              EW_LED_Yellow = 0;
 219   2      
 220   2              NS_LED_Red = 1;
 221   2              NS_LED_Green = 1;
 222   2              NS_LED_Yellow = 0;
 223   2          }
 224   1          else if(state == 7)
 225   1          {
 226   2              EW_LED_Red = 1;
 227   2              EW_LED_Green = 0;
 228   2              EW_LED_Yellow = 1;
 229   2      
 230   2              NS_LED_Red = 0;
 231   2              NS_LED_Green = 1;
 232   2              NS_LED_Yellow = 1;
 233   2          }
 234   1          else
 235   1          {
 236   2              EW_LED_Red = 0;
 237   2              EW_LED_Green = 1;
 238   2              EW_LED_Yellow = 1;
 239   2      
 240   2              NS_LED_Red = 1;
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 5   

 241   2              NS_LED_Green = 0;
 242   2              NS_LED_Yellow = 1;
 243   2          }
 244   1      }
 245          void key()
 246          {
 247   1          uchar k = 0;
 248   1          static uchar i = 0;
 249   1          k = Read_Key();
 250   1          if(k == 4) {
 251   2              i++;
 252   2              TR0 = 0;
 253   2          }
 254   1          if(k == 3 && TR0 == 0 && sec < TIME_BIG && (state == 1 || state == 2 || state == 3 || state == 4))
 255   1          {
 256   2              sec = sec + YELLOW_TIME;
 257   2              secCache = sec;
 258   2          }
 259   1          if(k == 2 && TR0 == 0 && sec > TIME_SMALL && (state == 1 || state == 2 || state == 3 || state == 4))
 260   1          {
 261   2              sec = sec - YELLOW_TIME;
 262   2              secCache = sec;
 263   2          }
 264   1          if(k == 1 && (state == 1 || state == 2 || state == 3 || state == 4))
 265   1          {
 266   2              TR0 = ~TR0;
 267   2          }
 268   1          if(i == 1) {
 269   2              state = 6;
 270   2          }
 271   1          if(i == 2) {
 272   2              state = 7;
 273   2          }
 274   1          if(i == 3) {
 275   2              state = 8;
 276   2          }
 277   1          if(i == 4) {
 278   2              state = 1;
 279   2              TR0 = 1;
 280   2              i = 0;
 281   2          }
 282   1      }
 283          
 284          void Tim_Init()
 285          {
 286   1          TMOD = 0x11;
 287   1          EA = 1;
 288   1          ET0 = 1;
 289   1          TR0 = 1;
 290   1          ET1 = 1;
 291   1          TR1 = 1;
 292   1          TH0 = THx;
 293   1          TL0 = TLx;
 294   1          TH1 = THx;
 295   1          TL1 = TLx;
 296   1      }
 297          void main()
 298          {
 299   1          Tim_Init();
 300   1          while(1)
 301   1          {
 302   2              display();
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 6   

 303   2              led_display();
 304   2              key();
 305   2          }
 306   1      }
 307          
 308          void TIME0() interrupt 1
 309          {
 310   1          static uchar j = 0;
 311   1          TH0 = THx;
 312   1          TL0 = TLx;
 313   1          if(++j == 20)
 314   1          {
 315   2              j = 0;
 316   2              sec--;
 317   2              if(sec == 0)
 318   2              {
 319   3                  sec = secCache;
 320   3                  state++;//s3
 321   3      
 322   3              }
 323   2              if(sec - YELLOW_TIME == 0)
 324   2              {
 325   3                  state++;//s2           s4
 326   3              }
 327   2          }
 328   1      }
 329          
 330          void TIME1() interrupt 3
 331          {
 332   1          static uchar j = 0;
 333   1          TH1 = THx;
 334   1          TL1 = TLx;
 335   1          if(++j == 10) {
 336   2              j = 0;
 337   2              FLASHING = ~FLASHING;
 338   2          }
 339   1      }
 340          
 341          
 342          
 343          
 344          
 345          
 346          
 347          
 348          
 349          
 350          
 351          
 352          
 353          
 354          
 355          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    957    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MAIN                                                              06/04/2021 17:58:18 PAGE 7   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
