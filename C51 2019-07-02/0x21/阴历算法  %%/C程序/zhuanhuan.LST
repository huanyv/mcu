C51 COMPILER V9.60.0.0   ZHUANHUAN                                                         06/06/2019 16:10:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZHUANHUAN
OBJECT MODULE PLACED IN zhuanhuan.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE zhuanhuan.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //#include <time.h>
   2          #include <string.h>
   3          #include <zhuanhuan.h>
   4           
   5          unsigned int LunarCalendarDay;
   6          unsigned long code LunarCalendarTable[199] =
   7          {
   8            0x04AE53,0x0A5748,0x5526BD,0x0D2650,0x0D9544,0x46AAB9,0x056A4D,0x09AD42,0x24AEB6,0x04AE4A,/*1901-1910*/
   9            0x6A4DBE,0x0A4D52,0x0D2546,0x5D52BA,0x0B544E,0x0D6A43,0x296D37,0x095B4B,0x749BC1,0x049754,/*1911-1920*/
  10            0x0A4B48,0x5B25BC,0x06A550,0x06D445,0x4ADAB8,0x02B64D,0x095742,0x2497B7,0x04974A,0x664B3E,/*1921-1930*/
  11            0x0D4A51,0x0EA546,0x56D4BA,0x05AD4E,0x02B644,0x393738,0x092E4B,0x7C96BF,0x0C9553,0x0D4A48,/*1931-1940*/
  12            0x6DA53B,0x0B554F,0x056A45,0x4AADB9,0x025D4D,0x092D42,0x2C95B6,0x0A954A,0x7B4ABD,0x06CA51,/*1941-1950*/
  13            0x0B5546,0x555ABB,0x04DA4E,0x0A5B43,0x352BB8,0x052B4C,0x8A953F,0x0E9552,0x06AA48,0x6AD53C,/*1951-1960*/
  14            0x0AB54F,0x04B645,0x4A5739,0x0A574D,0x052642,0x3E9335,0x0D9549,0x75AABE,0x056A51,0x096D46,/*1961-1970*/
  15            0x54AEBB,0x04AD4F,0x0A4D43,0x4D26B7,0x0D254B,0x8D52BF,0x0B5452,0x0B6A47,0x696D3C,0x095B50,/*1971-1980*/
  16            0x049B45,0x4A4BB9,0x0A4B4D,0xAB25C2,0x06A554,0x06D449,0x6ADA3D,0x0AB651,0x093746,0x5497BB,/*1981-1990*/
  17            0x04974F,0x064B44,0x36A537,0x0EA54A,0x86B2BF,0x05AC53,0x0AB647,0x5936BC,0x092E50,0x0C9645,/*1991-2000*/
  18            0x4D4AB8,0x0D4A4C,0x0DA541,0x25AAB6,0x056A49,0x7AADBD,0x025D52,0x092D47,0x5C95BA,0x0A954E,/*2001-2010*/
  19            0x0B4A43,0x4B5537,0x0AD54A,0x955ABF,0x04BA53,0x0A5B48,0x652BBC,0x052B50,0x0A9345,0x474AB9,/*2011-2020*/
  20            0x06AA4C,0x0AD541,0x24DAB6,0x04B64A,0x69573D,0x0A4E51,0x0D2646,0x5E933A,0x0D534D,0x05AA43,/*2021-2030*/
  21            0x36B537,0x096D4B,0xB4AEBF,0x04AD53,0x0A4D48,0x6D25BC,0x0D254F,0x0D5244,0x5DAA38,0x0B5A4C,/*2031-2040*/
  22            0x056D41,0x24ADB6,0x049B4A,0x7A4BBE,0x0A4B51,0x0AA546,0x5B52BA,0x06D24E,0x0ADA42,0x355B37,/*2041-2050*/
  23            0x09374B,0x8497C1,0x049753,0x064B48,0x66A53C,0x0EA54F,0x06B244,0x4AB638,0x0AAE4C,0x092E42,/*2051-2060*/
  24            0x3C9735,0x0C9649,0x7D4ABD,0x0D4A51,0x0DA545,0x55AABA,0x056A4E,0x0A6D43,0x452EB7,0x052D4B,/*2061-2070*/
  25            0x8A95BF,0x0A9553,0x0B4A47,0x6B553B,0x0AD54F,0x055A45,0x4A5D38,0x0A5B4C,0x052B42,0x3A93B6,/*2071-2080*/
  26            0x069349,0x7729BD,0x06AA51,0x0AD546,0x54DABA,0x04B64E,0x0A5743,0x452738,0x0D264A,0x8E933E,/*2081-2090*/
  27            0x0D5252,0x0DAA47,0x66B53B,0x056D4F,0x04AE45,0x4A4EB9,0x0A4D4C,0x0D1541,0x2D92B5          /*2091-2099*/
  28          };
  29          int code MonthAdd[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
  30          int LunarCalendar(int year,int month,int day)
  31          {
  32   1        int Spring_NY,Sun_NY,StaticDayCount;
  33   1        int index,flag;
  34   1        //Spring_NY 记录春节离当年元旦的天数。
  35   1        //Sun_NY 记录阳历日离当年元旦的天数。
  36   1        if ( ((LunarCalendarTable[year-1901] & 0x0060) >> 5) == 1)
  37   1          Spring_NY = (LunarCalendarTable[year-1901] & 0x001F) - 1;
  38   1        else
  39   1          Spring_NY = (LunarCalendarTable[year-1901] & 0x001F) - 1 + 31;
  40   1        Sun_NY = MonthAdd[month-1] + day - 1;
  41   1        if ( (!(year % 4)) && (month > 2))
  42   1          Sun_NY++;
  43   1        //StaticDayCount记录大小月的天数 29 或30
  44   1        //index 记录从哪个月开始来计算。
  45   1        //flag 是用来对闰月的特殊处理。
  46   1        //判断阳历日在春节前还是春节后
  47   1        if (Sun_NY >= Spring_NY)//阳历日在春节后（含春节那天）
  48   1        {
  49   2          Sun_NY -= Spring_NY;
  50   2          month = 1;
  51   2          index = 1;
  52   2          flag = 0;
  53   2          if ( ( LunarCalendarTable[year - 1901] & (0x80000 >> (index-1)) ) ==0)
  54   2            StaticDayCount = 29;
  55   2          else
C51 COMPILER V9.60.0.0   ZHUANHUAN                                                         06/06/2019 16:10:46 PAGE 2   

  56   2            StaticDayCount = 30;
  57   2          while (Sun_NY >= StaticDayCount)
  58   2          {
  59   3            Sun_NY -= StaticDayCount;
  60   3            index++;
  61   3            if (month == ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20) )
  62   3            {
  63   4              flag = ~flag;
  64   4              if (flag == 0)
  65   4                month++;
  66   4            }
  67   3            else
  68   3              month++;
  69   3            if ( ( LunarCalendarTable[year - 1901] & (0x80000 >> (index-1)) ) ==0)
  70   3              StaticDayCount=29;
  71   3            else
  72   3              StaticDayCount=30;
  73   3          }
  74   2          day = Sun_NY + 1;
  75   2        }
  76   1        else //阳历日在春节前
  77   1        {
  78   2          Spring_NY -= Sun_NY;
  79   2          year--;
  80   2          month = 12;
  81   2          if ( ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20) == 0)
  82   2            index = 12;
  83   2          else
  84   2            index = 13;
  85   2          flag = 0;
  86   2          if ( ( LunarCalendarTable[year - 1901] & (0x80000 >> (index-1)) ) ==0)
  87   2            StaticDayCount = 29;
  88   2          else
  89   2            StaticDayCount = 30;
  90   2          while (Spring_NY > StaticDayCount)
  91   2          {
  92   3            Spring_NY -= StaticDayCount;
  93   3            index--;
  94   3            if (flag == 0)
  95   3              month--;
  96   3            if (month == ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20))
  97   3              flag = ~flag;
  98   3            if ( ( LunarCalendarTable[year - 1901] & (0x80000 >> (index-1)) ) ==0)
  99   3              StaticDayCount = 29;
 100   3            else
 101   3              StaticDayCount = 30;
 102   3          }
 103   2          day = StaticDayCount - Spring_NY + 1;
 104   2        }
 105   1        LunarCalendarDay |= day;
 106   1        LunarCalendarDay |= (month << 6);
 107   1        if (month == ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20))
 108   1          return 1;
 109   1        else
 110   1          return 0;
 111   1      }
 112          void zhuan_huan(char year1,char month,char day,char *str)
 113          {
 114   1        int year=year1+2000;
 115   1        const char *ChDay[] = {"*","1","2","3","4","5",
 116   1                               "6","7","8","9","10",
 117   1                               "11","12","13","14","15",
C51 COMPILER V9.60.0.0   ZHUANHUAN                                                         06/06/2019 16:10:46 PAGE 3   

 118   1                               "16","17","18","19","20",
 119   1                               "21","22","23","24","25",
 120   1                               "26","27","28","29","30"
 121   1                              };
 122   1        const char *ChMonth[] = {"*","1","2","3","4","5","6","7","8","9","10","11","12"};
 123   1      //  struct tm * Local;
 124   1      //  long t;
 125   1      
 126   1      
 127   1        if (LunarCalendar(year,month,day))
 128   1        {
 129   2          strcat(str,"*");
 130   2          strcat(str,ChMonth[(LunarCalendarDay & 0x3C0) >> 6]);
 131   2        }
 132   1        else
 133   1          strcat(str,ChMonth[(LunarCalendarDay & 0x3C0) >> 6]);
 134   1        strcat(str,"-");
 135   1        strcat(str,ChDay[LunarCalendarDay & 0x3F]);
 136   1        
 137   1      //  getchar();
 138   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1683    ----
   CONSTANT SIZE    =   1037    ----
   XDATA SIZE       =      2     156
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
