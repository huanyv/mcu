C51 COMPILER V9.59.0.0   MAIN                                                              05/22/2019 21:37:25 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\DS1302;.\key) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "reg52.h"
   2          #include "ds1302.h"
   3          #include "key.h"
   4          
   5          sbit LA=P2^2;
   6          sbit LB=P2^3;
   7          sbit LC=P2^4;
   8          
   9          #define   dula   P0
  10          
  11          uint time_dis[6];
  12          uint date_dis[6];
  13          
  14          uchar code tab[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; 
  15          
  16          bit MENU1 = 0;
  17          
  18          void delay(uint i) {
  19   1        while(i--);
  20   1      }
  21          
  22          void timer()
  23          {
  24   1        read_time();
  25   1      
  26   1        time_dis[0]=time[3]/16; // 时
  27   1        time_dis[1]=time[3]%16;
  28   1        time_dis[2]=time[4]/16; // 分
  29   1        time_dis[3]=time[4]%16;
  30   1        time_dis[4]=time[5]/16; // 秒
  31   1        time_dis[5]=time[5]%16;
  32   1      
  33   1        date_dis[0]=time[0]/16; // 年
  34   1        date_dis[1]=time[0]%16;
  35   1        date_dis[2]=time[1]/16; // 月
  36   1        date_dis[3]=time[1]%16;
  37   1        date_dis[4]=time[2]/16; // 日
  38   1        date_dis[5]=time[2]%16;
  39   1      }
  40          
  41          void display()       //38  译码器  位选
  42          {
  43   1        uint i;
  44   1        if(MENU1 == 0) {
  45   2          for(i=0;i<8;i++) {
  46   3              switch(i) {
  47   4                  case 0:LC=0;LB=0;LA=0; dula= tab[time_dis[5]];break;            
  48   4                  case 1:LC=0;LB=0;LA=1; dula= tab[time_dis[4]];break;             
  49   4                  case 2:LC=0;LB=1;LA=0; dula= 0x40;            break;    
  50   4                  case 3:LC=0;LB=1;LA=1; dula= tab[time_dis[3]];break;              
  51   4                  case 4:LC=1;LB=0;LA=0; dula= tab[time_dis[2]];break;      
  52   4                  case 5:LC=1;LB=0;LA=1; dula= 0x40;            break;
  53   4                  case 6:LC=1;LB=1;LA=0; dula= tab[time_dis[1]];break;
  54   4                  case 7:LC=1;LB=1;LA=1; dula= tab[time_dis[0]];break;      
C51 COMPILER V9.59.0.0   MAIN                                                              05/22/2019 21:37:25 PAGE 2   

  55   4              }
  56   3              delay(100);
  57   3              dula=0x00;
  58   3            }
  59   2        }
  60   1        else {
  61   2          for(i=0;i<8;i++) {
  62   3              switch(i) {
  63   4                  case 0:LC=0;LB=0;LA=0; dula= tab[date_dis[5]];break;            
  64   4                  case 1:LC=0;LB=0;LA=1; dula= tab[date_dis[4]];break;             
  65   4                  case 2:LC=0;LB=1;LA=0; dula= tab[date_dis[3]]|0x80;break;
  66   4                  case 3:LC=0;LB=1;LA=1; dula= tab[date_dis[2]];break;              
  67   4                  case 4:LC=1;LB=0;LA=0; dula= tab[date_dis[1]]|0x80;break;     
  68   4                  case 5:LC=1;LB=0;LA=1; dula= tab[date_dis[0]];break;
  69   4                  case 6:LC=1;LB=1;LA=0; dula= tab[0];break;
  70   4                  case 7:LC=1;LB=1;LA=1; dula= tab[2];break;
  71   4              }
  72   3            delay(100);
  73   3            dula=0x00;
  74   3          }
  75   2        }
  76   1      }
  77          
  78          sbit led = P2^0;
  79          
  80          void KEY_crtl(void) {
  81   1        uchar KEY_VALUE = 0;
  82   1        uchar temp = 0; // 
  83   1        static bit TIME_STOP = 0;
  84   1        KEY_VALUE = read_key();
  85   1        if(KEY_VALUE == 4) {
  86   2          MENU1 = ~MENU1;
  87   2        }
  88   1        if(KEY_VALUE == 44) {
  89   2      
  90   2          TIME_STOP = ~TIME_STOP;
  91   2          if(TIME_STOP == 1) {
  92   3            ds1302_write(0x8e,0x00);     //时
  93   3            temp=ds1302_read(0x81);      //间
  94   3            ds1302_write(0x80,temp|0x80);  //暂
  95   3            ds1302_write(0x8e,0x80);     //停
  96   3          }
  97   2          if(TIME_STOP == 0) {
  98   3            ds1302_write(0x8e,0x00);     //时
  99   3            temp=ds1302_read(0x81);      //间
 100   3            ds1302_write(0x80,temp&0x7f);  //启动
 101   3            ds1302_write(0x8e,0x80);  
 102   3          }
 103   2          
 104   2          led = ~led;
 105   2          
 106   2        }
 107   1        
 108   1        
 109   1        if((MENU1 == 0)&&(TIME_STOP == 1)) {
 110   2          if(KEY_VALUE == 3) {
 111   3            temp=(ds1302_read(0x81)|0x80);
 112   3            temp++;
 113   3            if((temp&0x0f)>9) {
 114   4              temp += 6;
 115   4            }
 116   3            if(temp == 0x60)
C51 COMPILER V9.59.0.0   MAIN                                                              05/22/2019 21:37:25 PAGE 3   

 117   3              temp = 0;
 118   3            ds1302_write(0x8e,0x00);
 119   3            ds1302_write(0x80,temp);
 120   3            ds1302_write(0x8e,0x80);
 121   3          }
 122   2          
 123   2          if(KEY_VALUE == 2) {
 124   3            temp=ds1302_read(0x83);
 125   3            temp++;
 126   3            if((temp&0x0f)>9) {
 127   4              temp += 6;
 128   4            }
 129   3            if(temp == 0x60)
 130   3              temp = 0;
 131   3            ds1302_write(0x8e,0x00);
 132   3            ds1302_write(0x82,temp);
 133   3            ds1302_write(0x8e,0x80);
 134   3          }
 135   2          
 136   2          if(KEY_VALUE == 1) {
 137   3            temp=ds1302_read(0x85);
 138   3            temp++;
 139   3            if((temp&0x0f)>9) {
 140   4              temp += 6;
 141   4            }
 142   3            if(temp == 0x24)
 143   3              temp = 0;
 144   3            ds1302_write(0x8e,0x00);
 145   3            ds1302_write(0x84,temp);
 146   3            ds1302_write(0x8e,0x80);
 147   3          }
 148   2        }
 149   1        
 150   1        if((MENU1 == 1)&&(TIME_STOP == 1)) {
 151   2          if(KEY_VALUE == 3) {
 152   3            temp=(ds1302_read(0x87)&0x7f);
 153   3            temp++;
 154   3            if((temp&0x0f)>9) {
 155   4              temp += 6;
 156   4            }
 157   3            if(temp == 0x32)
 158   3              temp = 1;
 159   3            ds1302_write(0x8e,0x00);
 160   3            ds1302_write(0x86,temp);
 161   3            ds1302_write(0x8e,0x80);
 162   3          }
 163   2          
 164   2          if(KEY_VALUE == 2) {
 165   3            temp=ds1302_read(0x89);
 166   3            temp++;
 167   3            if((temp&0x0f)>9) {
 168   4              temp += 6;
 169   4            }
 170   3            if(temp == 0x13)
 171   3              temp = 1;
 172   3            ds1302_write(0x8e,0x00);
 173   3            ds1302_write(0x88,temp);
 174   3            ds1302_write(0x8e,0x80);
 175   3          }
 176   2          
 177   2          if(KEY_VALUE == 1) {
 178   3            temp=ds1302_read(0x8D);
C51 COMPILER V9.59.0.0   MAIN                                                              05/22/2019 21:37:25 PAGE 4   

 179   3            temp++;
 180   3            if((temp&0x0f)>9) {
 181   4              temp += 6;
 182   4            }
 183   3            if(temp == 0x50)
 184   3              temp = 0;
 185   3            ds1302_write(0x8e,0x00);
 186   3            ds1302_write(0x8C,temp);
 187   3            ds1302_write(0x8e,0x80);
 188   3          }
 189   2        }
 190   1        
 191   1      }
 192          
 193          void main(void) {
 194   1        ds1302_init();
 195   1        while(1) {
 196   2          
 197   2          timer();
 198   2          display();
 199   2          KEY_crtl();
 200   2          
 201   2      
 202   2      
 203   2        }
 204   1      }
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1077    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
