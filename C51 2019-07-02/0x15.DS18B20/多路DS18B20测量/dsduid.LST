C51 COMPILER V9.59.0.0   DSDUID                                                            05/29/2019 15:50:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DSDUID
OBJECT MODULE PLACED IN dsduid.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE dsduid.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          #include<intrins.h>
   3          #include <string.h>
   4          #include <stdio.h>
   5          #define uchar unsigned char
   6          #define uint  unsigned int
   7          
   8          sbit RS=  P2^0  ;             //液晶显示引脚定义
   9          sbit RW=  P2^1  ;
  10          sbit EN=  P2^2  ;
  11          uint  t=0,dian=0;
  12          uchar LCD_LINE_ONE[16]={"tp1:           "};   //定义显示屏幕
  13          uchar LCD_LINE_TWO[16]={"tp2:           "};
  14          //uchar LCD_LINE_THR[16]={"                "};
  15          
  16          int Tm;
  17          int  fushu=0 ;
  18          sbit DQ= P3^3;                       
  19          static unsigned char get_serial[]={     //获取的八个DS18B20内部RAM64位序列号
  20             224, 0,0,0,  184,  197, 50, 40,
  21             215, 0,0,0,  184,  197, 51, 40
  22            //  82, 0,0,0,  184,  197, 52, 40
  23           // 101, 0,0,0,  184,  197,  53,40,
  24            //60, 0,0,0,  184,  197,  54,40,
  25             //11, 0,0,0,  184,  197,  55,40,
  26              //47, 0,0,0,  184,  197,  56,40,
  27             //185, 0,0,0,  184,  197,  49,40,
  28           };
  29          void delay( ms )            //用于液晶显示的延时函数
  30          {
  31   1          int i ;
  32   1          while(ms--)
  33   1          {
  34   2               for(i=0 ;i<5 ;i++ )  ;
  35   2      
  36   2          }
  37   1      }
  38          
  39          uchar Read_LCD_State()          //读取液晶显示的状态
  40          {
  41   1        uchar state;
  42   1        RS=0;RW=1;EN=1;delay(1);
  43   1        state=P0;
  44   1        EN = 0;delay(1);
  45   1        return state;
  46   1      }
  47          void LCD_Busy_Wait()         //如果忙则等待函数
  48          {
  49   1        while((Read_LCD_State()&0x80)==0x80);
  50   1        delay(5);
  51   1      }
  52          
  53          void Write_LCD_Zhilin(uchar zl)       //液晶显示写指令函数
  54          {
  55   1        LCD_Busy_Wait();
C51 COMPILER V9.59.0.0   DSDUID                                                            05/29/2019 15:50:02 PAGE 2   

  56   1        RS=0;RW=0;
  57   1        EN=0;
  58   1        P0=zl;
  59   1        EN=1;
  60   1        delay(1);
  61   1        EN=0; 
  62   1      }
  63          void Write_LCD_shuju(uchar date)       //液晶显示写数据函数
  64          {
  65   1        LCD_Busy_Wait();
  66   1        RS=1;RW=0;
  67   1        EN=0;
  68   1        P0=date;
  69   1        EN=1;
  70   1        delay(1);
  71   1        EN=0; 
  72   1      }
  73           void LCD_INIT()        //液晶显示初始化
  74          {
  75   1          Write_LCD_Zhilin(0x38);   // 显示模式设置
  76   1        delay(1);         
  77   1        Write_LCD_Zhilin(0x01);   // 显示清屏
  78   1        delay(1);        
  79   1        Write_LCD_Zhilin(0x06);   // 光标移动设置
  80   1        delay(1);
  81   1        Write_LCD_Zhilin(0x0c);   // 开及光标设置
  82   1        delay(1);
  83   1      }
  84           void Display_LCD_String(uchar p,uchar *s)      //液晶显示写入函数
  85          {
  86   1        uchar i;
  87   1        Write_LCD_Zhilin(p|0x80)  ;    //写地址高位为一
  88   1        //Write_LCD_Zhilin(0x40|0x80);
  89   1        for(i=0;i<16;i++)
  90   1        {
  91   2          Write_LCD_shuju(s[i]);
  92   2          delay(1);   
  93   2        }
  94   1      }
  95          /***************************************************************************************/
  96          void delays(int us)            //用于DS18B20的延时函数
  97          { int s;
  98   1      for ( s=0; s<us; s++);
  99   1      }
 100          void rst(void)            //DS18B20初始化
 101          {
 102   1      DQ = 1;
 103   1      delays(2);
 104   1      DQ = 0;
 105   1      delays(30); //精确延时 480~960us
 106   1      DQ = 1;
 107   1      delays(8);
 108   1      }
 109          void write(unsigned char ku)    //DS18B20写函数
 110          {
 111   1      int i=0;
 112   1           for (i=0;i<8;i++)
 113   1          {
 114   2          DQ=0;
 115   2          DQ =ku&0x01;
 116   2          delays(3);
 117   2          DQ=1;
C51 COMPILER V9.59.0.0   DSDUID                                                            05/29/2019 15:50:02 PAGE 3   

 118   2          ku>>=1;
 119   2          }
 120   1      }
 121          void match_rom(unsigned char *rom)    //DS18B20匹配ROM函数
 122          {
 123   1       unsigned char i;
 124   1       rst();               //初始化
 125   1       write(0x55);           //匹配ROM
 126   1       for(i=8;i>0;i--)
 127   1       {
 128   2          write(*(rom+i-1));
 129   2       }
 130   1      }
 131          unsigned int read(void)       //DS18B20读函数，每次读16位
 132          {
 133   1        int i=0;
 134   1        unsigned int u=0;
 135   1          for (i=0;i<16;i++)
 136   1          {
 137   2          DQ=0;
 138   2          u>>=1;
 139   2          DQ=1;
 140   2          if(DQ) u|=0x8000;
 141   2          delays(4);
 142   2           }
 143   1          return (u);
 144   1      }
 145          int  read0(unsigned char *seria)  //读取对应温度值并转换函数
 146          {
 147   1        int temperature ;
 148   1        unsigned int tp;
 149   1        unsigned int lsb;
 150   1        rst();        //初始化
 151   1        write(0xCC);  //跳过RAM
 152   1        write(0x44);    //温度转换
 153   1        rst();          //再次初始化
 154   1        write(0xCC); 
 155   1        match_rom(seria);    //匹配ROM函数调用
 156   1          write(0xBE);   //读取存储器指令
 157   1        tp=read();       //读取温度值
 158   1        if((tp&0xf800)==0xf800)   //判断正负数
 159   1            {
 160   2               fushu=1 ;
 161   2                tp=~tp+1 ;
 162   2              lsb=(unsigned int)(tp*6.25); 
 163   2            dian=lsb%100;     //取小数部分
 164   2          
 165   2              temperature=lsb/100;
 166   2      
 167   2          }
 168   1           else
 169   1            {
 170   2              fushu=0;
 171   2              lsb=(unsigned int)(tp*6.25); 
 172   2            dian=lsb%100;  
 173   2          
 174   2              temperature=lsb/100;
 175   2      
 176   2             } 
 177   1           return(temperature);
 178   1      }
 179          /*****************************************************************************************/
C51 COMPILER V9.59.0.0   DSDUID                                                            05/29/2019 15:50:02 PAGE 4   

 180          void main()
 181          {
 182   1            uint i ;
 183   1          LCD_INIT();
 184   1          EA=0 ;     //使用DS18B20禁止任何中断
 185   1          while(1)
 186   1         {    
 187   2              for(i=0;i<2;i++)
 188   2            { 
 189   3                Tm=read0(get_serial+i*8);
 190   3              if(i==0)           //判断是第几个的数据
 191   3              {
 192   4                   if(fushu==0)            //判断是否加负号
 193   4                        sprintf(LCD_LINE_ONE+5," %d", Tm); 
 194   4                   if(fushu==1)
 195   4                      sprintf(LCD_LINE_ONE+5,"-%d", Tm); 
 196   4                     sprintf(LCD_LINE_ONE+10,".%d",dian);   //加入小数部分
 197   4                   Display_LCD_String(0x00,LCD_LINE_ONE);
 198   4               }
 199   3              if(i==1)
 200   3              {  
 201   4                     if(fushu==0) 
 202   4                         sprintf(LCD_LINE_TWO+5," %d", Tm); 
 203   4                   if(fushu==1)
 204   4                       sprintf(LCD_LINE_TWO+5,"-%d", Tm); 
 205   4                     sprintf(LCD_LINE_TWO+10,".%d",dian);
 206   4                   Display_LCD_String(0x40,LCD_LINE_TWO); 
 207   4              }
 208   3      
 209   3            }
 210   2      
 211   2          
 212   2         }
 213   1      }
 214          
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    786    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     56      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
